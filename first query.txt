SessionFactory factory=new Configuration()
				.configure("hibernate.cfg.xml").addAnnotatedClass(City.class)
				.buildSessionFactory();
		
		Session session=factory.getCurrentSession();
		try {
			session.beginTransaction();
			
			List<City> cities=session.createQuery("from City").getResultList();
			for (City city : cities) {
			System.out.println(city.getPopulation());	
			}
			session.beginTransaction().commit();
		} finally {
			factory.close();
		} 

Bu kod parçası, Hibernate kullanarak `City` sınıfına ait verileri veritabanından alıp,
 her şehrin nüfusunu ekrana yazdıran bir Java programını temsil ediyor. İşleyişi adım adım açıklayalım:

1. `SessionFactory` nesnesi oluşturuluyor:
   - `Configuration` sınıfının `configure()` metoduyla Hibernate yapılandırma dosyası (`hibernate.cfg.xml`) belirtiliyor
 ve `addAnnotatedClass()` metoduyla `City` sınıfı Hibernate tarafından yönetilen bir entity olarak tanımlanıyor.
 Ardından `buildSessionFactory()` metoduyla `SessionFactory` nesnesi oluşturuluyor.
 `SessionFactory`, oturumları oluşturmak için kullanılan bir fabrika sınıfıdır.

2. Oturum açılıyor:
   - `factory` üzerinden `getCurrentSession()` metodu çağrılarak oturum (session) alınıyor 
   ve `session` değişkenine atanıyor.

3. İşlem başlatılıyor:
   - `session.beginTransaction()` metodu çağrılarak bir işlem (transaction) başlatılıyor.
   Bu, veritabanı işlemlerinin gruplandırılmasını ve birlikte işlem görmesini sağlar.

4. Şehir verileri sorgulanıyor ve nüfus bilgisi ekrana yazdırılıyor:
   - `session.createQuery("from City").getResultList()` ile `City` sınıfına ait tüm veriler sorgulanıyor 
   ve `cities` listesine atanıyor.
   - Sonrasında `for` döngüsü ile her bir şehir için nüfus bilgisi (`city.getPopulation()`) ekrana yazdırılıyor.

5. İşlem tamamlanıyor:
   - `session.beginTransaction().commit()` metoduyla başlatılan işlem tamamlanıyor 
   ve veritabanına değişiklikler uygulanıyor.

6. Oturum kapatılıyor:
   - `finally` bloğunda `factory.close()` metodu çağrılarak oturum kapatılıyor ve ilgili kaynaklar serbest bırakılıyor.

   Bu kod parçası, Hibernate ile veritabanı işlemlerini gerçekleştirmek için basit bir örneği temsil ediyor. 
   Veritabanından veri sorgulamak, işlem başlatmak, 
   verileri manipüle etmek ve oturumu kapatmak gibi temel Hibernate işlemlerini içeriyor.

==>List<City> cities=session.createQuery("from City c order by c.name ").getResultList();
	sorgulari sirali halde getirir.

==>List<String> countryCodes=session.createQuery("select c.countryCode from City c group by c.countryCode").getResultList();
			for (String countryCode : countryCodes) {
			System.out.println(countryCode);	
			} ne ise yariyor
	Bu kod parçası, `City` sınıfına ait veritabanındaki şehirlerin `countryCode` sütununu gruplayarak benzersiz
	 ülke kodlarını elde ediyor ve her bir ülke kodunu ekrana yazdırıyor.

	İşleyişi adım adım açıklayalım:

1. `createQuery()` metodu kullanılarak bir sorgu oluşturuluyor:
   - `"select c.countryCode from City c group by c.countryCode"` sorgusu, `City` sınıfına ait verileri `countryCode` sütununa
       göre gruplayarak sadece ülke kodlarını seçiyor.

2. `getResultList()` metoduyla sorgu sonuçları alınıyor:
   - Oluşturulan sorgu `getResultList()` metodu ile çalıştırılıyor ve sonuçlar `countryCodes` listesine atanıyor.
     Bu liste, sorgudan dönen benzersiz ülke kodlarını içerir.

3. Her bir ülke kodu ekrana yazdırılıyor:
   - `for` döngüsü ile `countryCodes` listesindeki her bir ülke kodu (`countryCode`) ekrana yazdırılıyor.

   Bu kod parçası, veritabanında bulunan şehirlerin ülke kodlarını gruplayarak benzersiz ülke kodlarını
    elde etmek için bir sorgu çalıştırır ve bu kodları ekrana basar. 
   Örneğin, "TR", "US", "DE" gibi ülke kodları ekrana yazdırılabilir.
   Bu, veritabanındaki şehirlerin hangi ülkelere ait olduğunu analiz etmek veya istatistiksel bilgiler elde etmek gibi senaryolarda kullanılabilir.